@{
    ViewBag.Title = "Home Page";
}
@model DrawingOnline.Models.Drawing
<link rel="stylesheet" href="https://use.typekit.net/tvs3mun.css">
<link href="~/Content/Draw.css" rel="stylesheet" />
<link href="~/Content/SiteWide.css" rel="stylesheet" />
<script type="text/javascript" src="https://code.jquery.com/jquery-1.12.4.js"></script>

<div class="site">
    <header>
        <ul class="nav-list" id="coll">
            <li class="icon" id="icon-left" style="">
                <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">
                    <g id="Iconly_Bold_Edit" data-name="Iconly/Bold/Edit" transform="translate(-3 -3)">
                        <g id="Edit" transform="translate(3 3)">
                            <path id="Path_7" data-name="Path 7" d="M33.98,31.907a2.047,2.047,0,0,1,0,4.093H22.559a2.047,2.047,0,0,1,0-4.093H33.98ZM26.06,1.4l2.95,2.343a6.131,6.131,0,0,1,2.292,3.5,4.8,4.8,0,0,1-.976,4.085L12.753,34.056A4.209,4.209,0,0,1,9.484,35.69l-7,.086a.8.8,0,0,1-.785-.624L.1,28.251a4.265,4.265,0,0,1,.806-3.59L13.368,8.536a.626.626,0,0,1,.849-.108L19.459,12.6a1.693,1.693,0,0,0,1.295.365,1.89,1.89,0,0,0,1.634-2.085,2.1,2.1,0,0,0-.658-1.268L16.637,5.526a.757.757,0,0,1-.127-1.051l1.974-2.561C20.308-.429,23.492-.644,26.06,1.4Z" transform="translate(0 0)" fill="#209bba" />
                        </g>
                    </g>
                </svg>

            </li>
            <li><a href="@Url.Action("Index","Home")"><h3>Home</h3></a></li>
            <li>
                <a href="@Url.Action(
                            actionName: "Draw",
                            controllerName: "Home",
                            routeValues: new RouteValueDictionary(new { edit = "false", remix = "false", remixId = "none", drawId = "none"}))"><h3 class="current-page">Draw</h3></a>
            </li>
            <li><a href="@Url.Action("MyDrawings","Home")"><h3>My Drawings</h3></a></li>
            <li><a href="@Url.Action("PublicDrawings","Home")"><h3>Public Drawings</h3></a></li>
            <li class="icon" id="icon-right">
                <a class="menuIcon" href="@Url.Action("Profile","Home")">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="40" viewBox="0 0 32 40">
                        <g id="Iconly_Bold_Profile" data-name="Iconly/Bold/Profile" transform="translate(-4 -2)">
                            <g id="Profile" transform="translate(4 2)">
                                <path id="Path_6" data-name="Path 6" d="M16,26.348c8.677,0,16,1.41,16,6.85S24.629,40,16,40C7.325,40,0,38.59,0,33.15S7.371,26.348,16,26.348ZM16,0A10.583,10.583,0,1,1,5.412,10.582,10.547,10.547,0,0,1,16,0Z" transform="translate(0 0)" fill="#209bba" />
                            </g>
                        </g>
                    </svg>
                </a>
            </li>
        </ul>
    </header>

    <content class="content">
        <div id="smallTop">

            <div id="menuIcon">
                <svg xmlns="http://www.w3.org/2000/svg" width="43" height="29.667" viewBox="0 0 43 29.667">
                    <g id="Icon_feather-menu" data-name="Icon feather-menu" transform="translate(-3 -7.5)">
                        <path id="Path_13" data-name="Path 13" d="M4.5,18h40" transform="translate(0 4.333)" fill="none" stroke="#209BBA" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" />
                        <path id="Path_14" data-name="Path 14" d="M4.5,9h40" fill="none" stroke="#209BBA" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" />
                        <path id="Path_15" data-name="Path 15" d="M4.5,27h40" transform="translate(0 8.667)" fill="none" stroke="#209BBA" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" />
                    </g>
                </svg>
            </div>
            <div id="smallTitle">
                <h3>Draw</h3>
            </div>
        </div>
        
        <div id="mainContent">
            <div id="drawBoard">
                <canvas id="c"></canvas>
            </div>
            <div>
                <div id="tools">
                    <div id="canvasTools">
                        <div style="width:70%" class="editBut"><button onclick="toggleMode()" id="toggleBut">Enable Transform</button></div>
                        <div style="width:30%" class="editBut"><button onclick="clearCanvas()">Clear</button></div>
                    </div>
                    <ul id="drawTools">
                        <li>
                            <label for="bColorPicker">Background Color</label>
                            <input class="colorChanger" id="bColorPicker" name="bColorPicker" type="color" onchange="setBackgroundColor()" value="#ffffff" />
                        </li>
                        <li>
                            <label for="colorPicker">Stroke Color</label>
                            <input class="colorChanger" id="colorPicker" name="colorPicker" type="color" onchange="setColor()" />
                        </li>
                        <li>
                            <label for="sizePicker">Size</label>
                            <input id="sizePicker" name="sizePicker" type="range" onchange="setBrushSize()" min="1" max="100" />
                            <label for="sizePicker" id="sizeValue"></label>
                        </li>
                    </ul>
                    <div id="saveTolls">
                        <div id="saveBut"><button id="quickSave">Save</button></div>
                    </div>
                </div>
            </div>
        </div>
    </content>
    <div id="addPopUp">
        <div id="popHeader">
            <h2>Save As</h2>

            <div id="exitPop">
                <svg id="Circle_Button_" data-name="Circle Button " xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">
                    <rect id="Area_SIZE:MEDIUM_STATE:DEFAULT_STYLE:STYLE2_" data-name="Area [SIZE:MEDIUM][STATE:DEFAULT][STYLE:STYLE2]" width="48" height="48" rx="24" fill="rgba(255,255,255,0.15)" />
                    <g id="Icon_" data-name="Icon " transform="translate(14 14)">
                        <rect id="Area_ICON:feather_x_SIZE:MEDIUM_STATE:DEFAULT_STYLE:STYLE2_" data-name="Area [ICON:feather/x][SIZE:MEDIUM][STATE:DEFAULT][STYLE:STYLE2]" width="20" height="20" fill="rgba(99,226,209,0.27)" opacity="0" />
                        <g id="Icon" transform="translate(-1 -1)">
                            <line id="Line" x1="10" y2="10" transform="translate(6 6)" fill="none" stroke="#0082ff" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.667" />
                            <line id="Line-2" data-name="Line" x2="10" y2="10" transform="translate(6 6)" fill="none" stroke="#0082ff" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.667" />
                        </g>
                    </g>
                </svg>
            </div>

        </div>
        <div>
            <label for="nameIn">Name:</label>
            <br />
            <input id="nameIn" name="nameIn" type="text" placeholder="Enter name..." />
        </div>
        <div>
            <label for="publicIn">Public:</label>
            <input id="publicIn" name="publicIn" type="checkbox" />
        </div>
        <button id="saveAsBut">Save As</button>
    </div>
</div>

<script src="~/Scripts/fabric.min.js"></script>
<script src="~/Scripts/lzw_encoder.js"></script>
<script>
    ///<reference path="jquery-3.4.1.slim.js" />
    console.log('hello');

    var finalCanvas;

    var colorPicker = document.getElementById('colorPicker')
    var sizePicker = document.getElementById('sizePicker')
    var sizeValue = document.getElementById('sizeValue')
    var bColorPicker = document.getElementById('bColorPicker')
    var remixed = @ViewBag.remix;
    var edit = @ViewBag.edit;

    var x = window.matchMedia("(max-width: 1124px)")
    myFunction(x) // Call listener function at run time
    x.addListener(myFunction)

    function myFunction(x) {
        var elements = document.getElementsByClassName('editBut');
        if (x.matches) {
            for (var i = 0; i < elements.length; i++) {
                if (i == 0) {
                    elements[i].style.width = '100%'
                    console.log(elements[i].width);
                } else {
                    elements[i].style.width = '100%'
                    console.log(elements[i].width);
                }
            }// If media query matches
            console.log(elements[0].width);
        } else {
            for (var i = 0; i < elements.length; i++) {
                if (i == 0) {
                    elements[i].style.width = '80%'
                    console.log(elements[i].width);
                } else {
                    elements[i].style.width = '30%'
                    console.log(elements[i].width);
                }
            }

        }
    }
     function initCanvas(id) {
            return new fabric.Canvas(id, {
                width: 750,
                height: 750,
                backgroundColor: 'white',

            })

        }

    var exitPop = document.getElementById('exitPop');

    exitPop.addEventListener('click', () => {
        exitPop.parentElement.parentElement.style.display = 'none';
    })

    const modes = {
        transform: 'transform',
        drawing: 'drawing'
    }

    let currentMode


    function setBackgroundColor() {
        canvas.backgroundColor = bColorPicker.value
        canvas.renderAll()
    }

    function setColor() {
        var color = colorPicker.value;
        console.log(color)
        canvas.freeDrawingBrush.color = color;
        canvas.renderAll();
    }

    function setBrushSize() {
        var size = sizePicker.value
        sizeValue.innerHTML = size;
        canvas.freeDrawingBrush.width = size
        canvas.renderAll();
    }

    function toggleMode() {
        if (currentMode == modes.drawing) {
            document.getElementById('toggleBut').innerHTML = 'Enable Drawing'
            canvas.isDrawingMode = false;
            currentMode = modes.transform
            canvas.renderAll();
        } else {
            document.getElementById('toggleBut').innerHTML = 'Enable Transform'
            canvas.freeDrawingBrush.color = colorPicker.value
            canvas.freeDrawingBrush.width = sizePicker.value
            currentMode = modes.drawing;
            canvas.isDrawingMode = true;
            canvas.renderAll();
        }
    }

    function reloadCanvas(canvas) {
        var bufferCanvas = JSON.stringify(canvas)
        canvas.clear();
        canvas.loadFromJSON(bufferCanvas);

    }

    function clearCanvas() {
        canvas.clear();
        setBackgroundColor();
    }

    function setEvents(canvas) {
        canvas.on('mouse:move', (event) => {
            if (mousePressed && currentMode == modes.drawing) {
                console.log('drawing');
            }
        })
        canvas.on('mouse:down', (event) => {
            mousePressed = true;
        })

        canvas.on('mouse:up', (event) => {
            mousePressed = false;
            if (currentMode == modes.drawing)
                reloadCanvas(canvas);
            saveCanvas(canvas);
        })

    }

    function checkForRemix(canvas) {
        if (remixed || edit) {
            var remix = '@Model.Canvas.Replace("\n", "").Replace("\r", "")'
;
            console.log(remix)
            remix = lzw_decode(remix.replace(/&quot;/g, '"'))
            console.log(remix)
            canvas.loadFromJSON(remix);
        }
    }

    const canvas = initCanvas('c');
    checkForRemix(canvas);
    sizeValue.innerHTML = '10'
    bColorPicker.value = '#ffffff'
    toggleMode(modes.drawing);
    var mousePressed = false;
    setEvents(canvas);



    function saveCanvas(canvas) {
        finalCanvas = {
            canvas: canvas
        }
    }


</script>
<script src="~/Scripts/SiteWide.js"></script>

<script type="text/javascript">
    var remixed = @ViewBag.remix;
    var remixedID;
    if (remixed) {
        remixedID = @ViewBag.remixId;
    }

    var edit = @ViewBag.edit;
    var drawId
    if (edit) {
        drawId = @ViewBag.drawId;
    }


    var popUpSave = document.getElementById('addPopUp')

    $(function () {
        $("#quickSave").click(function () {

            if (edit) {

                var drawing = new Object();

                drawing.ID = drawId
                drawing.Canvas = lzw_encode(JSON.stringify(finalCanvas.canvas));
                drawing.CanvasSVG = finalCanvas.canvas.toSVG()

                        $.ajax({
                        type: "POST",
                            url: "/Home/UpdateDrawing",
                            data: JSON.stringify(drawing),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                            success: function (r) {
                                alert('Drawing Saved');
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        },
                        error: function (response) {
                            alert(response.responseText);
                        }
                });
            } else {
                popUpSave.style.display = 'flex';
            }
        });
    });

    $("#saveAsBut").click(function () {
        var drawing = new Object();

        drawing.Name = $('#nameIn').val();
        console.log(JSON.stringify(finalCanvas.canvas))
        console.log(JSON.stringify(finalCanvas.canvas))
        drawing.Canvas = lzw_encode(JSON.stringify(finalCanvas.canvas));
        drawing.Remixed = remixed
        drawing.RemixedID = remixedID
        drawing.Publicity = document.getElementById('publicIn').checked;
        drawing.CanvasSVG = finalCanvas.canvas.toSVG()

        console.log($('#publicIn').val());
        $.ajax({
            type: "POST",
            url: "/Home/AddDrawing",
            data: JSON.stringify(drawing),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                popUpSave.style.display = 'none';
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });

    });
</script>
